// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;
using namespace std;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _SIRTGP_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _SIRTGP_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _SIRTGP_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _SIRTGP_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// sample_cpp
double sample_cpp(vec x, int size, bool replace, vec prob);
RcppExport SEXP _SIRTGP_sample_cpp(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cpp(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// quantile_cpp
vec quantile_cpp(vec x, double size, double low, double high);
RcppExport SEXP _SIRTGP_quantile_cpp(SEXP xSEXP, SEXP sizeSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_cpp(x, size, low, high));
    return rcpp_result_gen;
END_RCPP
}
// rtrunc_Rpkg
double rtrunc_Rpkg(double a, double b, double mu, double sd);
RcppExport SEXP _SIRTGP_rtrunc_Rpkg(SEXP aSEXP, SEXP bSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtrunc_Rpkg(a, b, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// fun_mul
mat fun_mul(mat A, colvec x);
RcppExport SEXP _SIRTGP_fun_mul(SEXP ASEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_mul(A, x));
    return rcpp_result_gen;
END_RCPP
}
// fun_dev
mat fun_dev(mat A, colvec x);
RcppExport SEXP _SIRTGP_fun_dev(SEXP ASEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< colvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_dev(A, x));
    return rcpp_result_gen;
END_RCPP
}
// G_thres_cpp
vec G_thres_cpp(vec x, double thres);
RcppExport SEXP _SIRTGP_G_thres_cpp(SEXP xSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(G_thres_cpp(x, thres));
    return rcpp_result_gen;
END_RCPP
}
// sample_e_cpp
double sample_e_cpp(int k, int l, int K, int rt, vec Z, mat X, mat Xmat, vec SR_other, vec S0, vec E_hat, double thres1, vec lambda, double tausq);
RcppExport SEXP _SIRTGP_sample_e_cpp(SEXP kSEXP, SEXP lSEXP, SEXP KSEXP, SEXP rtSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP XmatSEXP, SEXP SR_otherSEXP, SEXP S0SEXP, SEXP E_hatSEXP, SEXP thres1SEXP, SEXP lambdaSEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type SR_other(SR_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< vec >::type E_hat(E_hatSEXP);
    Rcpp::traits::input_parameter< double >::type thres1(thres1SEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_e_cpp(k, l, K, rt, Z, X, Xmat, SR_other, S0, E_hat, thres1, lambda, tausq));
    return rcpp_result_gen;
END_RCPP
}
// sample_ic_cpp
double sample_ic_cpp(double n, vec Z, vec SR_other, vec S0, double tausq);
RcppExport SEXP _SIRTGP_sample_ic_cpp(SEXP nSEXP, SEXP ZSEXP, SEXP SR_otherSEXP, SEXP S0SEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< vec >::type SR_other(SR_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_ic_cpp(n, Z, SR_other, S0, tausq));
    return rcpp_result_gen;
END_RCPP
}
// sample_eta_cpp
double sample_eta_cpp(int u, int v, int K, int rt, vec Z, mat X, mat X0, vec SR, vec S0_other, vec E_hat, vec eta_hat, double thres1, double thres2, double tausq, double sigsq_eta);
RcppExport SEXP _SIRTGP_sample_eta_cpp(SEXP uSEXP, SEXP vSEXP, SEXP KSEXP, SEXP rtSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP X0SEXP, SEXP SRSEXP, SEXP S0_otherSEXP, SEXP E_hatSEXP, SEXP eta_hatSEXP, SEXP thres1SEXP, SEXP thres2SEXP, SEXP tausqSEXP, SEXP sigsq_etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< vec >::type SR(SRSEXP);
    Rcpp::traits::input_parameter< vec >::type S0_other(S0_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type E_hat(E_hatSEXP);
    Rcpp::traits::input_parameter< vec >::type eta_hat(eta_hatSEXP);
    Rcpp::traits::input_parameter< double >::type thres1(thres1SEXP);
    Rcpp::traits::input_parameter< double >::type thres2(thres2SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq_eta(sigsq_etaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_eta_cpp(u, v, K, rt, Z, X, X0, SR, S0_other, E_hat, eta_hat, thres1, thres2, tausq, sigsq_eta));
    return rcpp_result_gen;
END_RCPP
}
// sample_E_hat_cpp
double sample_E_hat_cpp(int k, int j, int K, int rt, vec Z, mat X, mat Xmat, vec SR_other, vec S0, mat e, mat eta_m, double thres1, double tausq, double sigsq);
RcppExport SEXP _SIRTGP_sample_E_hat_cpp(SEXP kSEXP, SEXP jSEXP, SEXP KSEXP, SEXP rtSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP XmatSEXP, SEXP SR_otherSEXP, SEXP S0SEXP, SEXP eSEXP, SEXP eta_mSEXP, SEXP thres1SEXP, SEXP tausqSEXP, SEXP sigsqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type SR_other(SR_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< mat >::type eta_m(eta_mSEXP);
    Rcpp::traits::input_parameter< double >::type thres1(thres1SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_E_hat_cpp(k, j, K, rt, Z, X, Xmat, SR_other, S0, e, eta_m, thres1, tausq, sigsq));
    return rcpp_result_gen;
END_RCPP
}
// sample_eta_hat_cpp
double sample_eta_hat_cpp(int u, int v, int K, int rt, vec Z, mat X, mat X0, mat Xmat, vec SR, vec S0_other, vec eta, double thres2, double tausq, double sigsq);
RcppExport SEXP _SIRTGP_sample_eta_hat_cpp(SEXP uSEXP, SEXP vSEXP, SEXP KSEXP, SEXP rtSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP X0SEXP, SEXP XmatSEXP, SEXP SRSEXP, SEXP S0_otherSEXP, SEXP etaSEXP, SEXP thres2SEXP, SEXP tausqSEXP, SEXP sigsqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type SR(SRSEXP);
    Rcpp::traits::input_parameter< vec >::type S0_other(S0_otherSEXP);
    Rcpp::traits::input_parameter< vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type thres2(thres2SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_eta_hat_cpp(u, v, K, rt, Z, X, X0, Xmat, SR, S0_other, eta, thres2, tausq, sigsq));
    return rcpp_result_gen;
END_RCPP
}
// loglike_cpp
double loglike_cpp(int n, vec Y, vec SR, vec S0, double tausq);
RcppExport SEXP _SIRTGP_loglike_cpp(SEXP nSEXP, SEXP YSEXP, SEXP SRSEXP, SEXP S0SEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< vec >::type SR(SRSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_cpp(n, Y, SR, S0, tausq));
    return rcpp_result_gen;
END_RCPP
}
// sample_Z
vec sample_Z(int n, vec Y, vec SR, vec S0);
RcppExport SEXP _SIRTGP_sample_Z(SEXP nSEXP, SEXP YSEXP, SEXP SRSEXP, SEXP S0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< vec >::type SR(SRSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_Z(n, Y, SR, S0));
    return rcpp_result_gen;
END_RCPP
}
// sample_thres1
vec sample_thres1(int n, int K, vec Z, mat X, mat Xmat, vec val, vec prob1, mat eta_m, mat e, vec E_hat, vec S0, double tausq, double rt);
RcppExport SEXP _SIRTGP_sample_thres1(SEXP nSEXP, SEXP KSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP XmatSEXP, SEXP valSEXP, SEXP prob1SEXP, SEXP eta_mSEXP, SEXP eSEXP, SEXP E_hatSEXP, SEXP S0SEXP, SEXP tausqSEXP, SEXP rtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type val(valSEXP);
    Rcpp::traits::input_parameter< vec >::type prob1(prob1SEXP);
    Rcpp::traits::input_parameter< mat >::type eta_m(eta_mSEXP);
    Rcpp::traits::input_parameter< mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< vec >::type E_hat(E_hatSEXP);
    Rcpp::traits::input_parameter< vec >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type rt(rtSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_thres1(n, K, Z, X, Xmat, val, prob1, eta_m, e, E_hat, S0, tausq, rt));
    return rcpp_result_gen;
END_RCPP
}
// sample_thres2
vec sample_thres2(int n, int K, vec Z, mat X0, vec val, vec prob2, mat eta, vec eta_hat, vec SR, double tausq);
RcppExport SEXP _SIRTGP_sample_thres2(SEXP nSEXP, SEXP KSEXP, SEXP ZSEXP, SEXP X0SEXP, SEXP valSEXP, SEXP prob2SEXP, SEXP etaSEXP, SEXP eta_hatSEXP, SEXP SRSEXP, SEXP tausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< vec >::type val(valSEXP);
    Rcpp::traits::input_parameter< vec >::type prob2(prob2SEXP);
    Rcpp::traits::input_parameter< mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< vec >::type eta_hat(eta_hatSEXP);
    Rcpp::traits::input_parameter< vec >::type SR(SRSEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_thres2(n, K, Z, X0, val, prob2, eta, eta_hat, SR, tausq));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sample_cpp
List gibbs_sample_cpp(int T, int K, int L, int n, vec Y, mat X, mat X0, mat Xmat, vec eta, mat eta_m, mat e, vec E_hat, vec eta_hat, double beta0, double thres1, double thres2, vec lambda, double tausq, double sigsq, double sigsq_eta, int rt, double alpha1, double alpha2, vec prob1, vec prob2, vec val1, vec val2);
RcppExport SEXP _SIRTGP_gibbs_sample_cpp(SEXP TSEXP, SEXP KSEXP, SEXP LSEXP, SEXP nSEXP, SEXP YSEXP, SEXP XSEXP, SEXP X0SEXP, SEXP XmatSEXP, SEXP etaSEXP, SEXP eta_mSEXP, SEXP eSEXP, SEXP E_hatSEXP, SEXP eta_hatSEXP, SEXP beta0SEXP, SEXP thres1SEXP, SEXP thres2SEXP, SEXP lambdaSEXP, SEXP tausqSEXP, SEXP sigsqSEXP, SEXP sigsq_etaSEXP, SEXP rtSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP prob1SEXP, SEXP prob2SEXP, SEXP val1SEXP, SEXP val2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< mat >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< mat >::type eta_m(eta_mSEXP);
    Rcpp::traits::input_parameter< mat >::type e(eSEXP);
    Rcpp::traits::input_parameter< vec >::type E_hat(E_hatSEXP);
    Rcpp::traits::input_parameter< vec >::type eta_hat(eta_hatSEXP);
    Rcpp::traits::input_parameter< double >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< double >::type thres1(thres1SEXP);
    Rcpp::traits::input_parameter< double >::type thres2(thres2SEXP);
    Rcpp::traits::input_parameter< vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tausq(tausqSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq_eta(sigsq_etaSEXP);
    Rcpp::traits::input_parameter< int >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< vec >::type prob1(prob1SEXP);
    Rcpp::traits::input_parameter< vec >::type prob2(prob2SEXP);
    Rcpp::traits::input_parameter< vec >::type val1(val1SEXP);
    Rcpp::traits::input_parameter< vec >::type val2(val2SEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sample_cpp(T, K, L, n, Y, X, X0, Xmat, eta, eta_m, e, E_hat, eta_hat, beta0, thres1, thres2, lambda, tausq, sigsq, sigsq_eta, rt, alpha1, alpha2, prob1, prob2, val1, val2));
    return rcpp_result_gen;
END_RCPP
}
